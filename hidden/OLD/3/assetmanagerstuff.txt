CAnimationController *CAssetManager::CreateAnimationController( const char *sPath )
{
	if (UTIL_streq( UTIL_extn( sPath ), "3an" ))
	{
		CAnimation *pAnimation = GetAnimation( sPath );
		if (!pAnimation)
			return NULL;

		return new CAnimationController( pAnimation );
	}

	if (!pFileManager->OpenFile( sPath ))
		return NULL;

	unsigned int uiAnimationCount;
	std::vector<CAnimation *> pAnimations;

	if (!pFileManager->Read( uiAnimationCount ))
	{
		pFileManager->CloseFile();
		return NULL;
	}

	pAnimations.resize( uiAnimationCount );

	for (unsigned int i = 0; i < uiAnimationCount; i++)
	{
		char *sAnimationPath;
		if (!pFileManager->Read( sAnimationPath ))
		{
			pFileManager->CloseFile();
			return NULL;
		}

		CAnimation *pAnimation = GetAnimation( sAnimationPath );
		delete[] sAnimationPath;

		if (!pAnimation)
		{
			pFileManager->CloseFile();
			return NULL;
		}

		pAnimations[i] = pAnimation;
	}

	unsigned int uiControllerSequencesCount;
	std::vector<CAnimationControllerSequence *> pControllerSequences;

	if (!pFileManager->Read( uiControllerSequencesCount ))
	{
		pFileManager->CloseFile();
		return NULL;
	}

	pControllerSequences.resize( uiControllerSequencesCount );

	for (unsigned int i = 0; i < uiControllerSequencesCount; i++)
	{
		unsigned int uiSequenceAnimationCount;
		std::vector<CAnimation *> pSequenceAnimations;
		std::vector<float> flAnimationTimes;

		if (!pFileManager->Read( uiSequenceAnimationCount ))
		{
			pFileManager->CloseFile();
			return NULL;
		}

		pSequenceAnimations.resize( uiSequenceAnimationCount );
		flAnimationTimes.resize( uiSequenceAnimationCount );

		for (unsigned int j = 0; j < uiSequenceAnimationCount; j++)
		{
			unsigned int uiAnimationIndex;
			if (!pFileManager->Read( uiAnimationIndex ))
			{
				pFileManager->CloseFile();
				return NULL;
			}

			pSequenceAnimations[j] = pAnimations[uiAnimationIndex];

			if (!pFileManager->Read( flAnimationTimes[j] ))
			{
				pFileManager->CloseFile();
				return NULL;
			}

			float flAnimationTime = pSequenceAnimations[j]->GetDuration() / pSequenceAnimations[j]->GetTicksPerSecond();
			if (flAnimationTimes[j] > flAnimationTime || flAnimationTimes[j] < 0.0f)
				flAnimationTimes[j] = flAnimationTime;
		}

		pControllerSequences[i] = new CAnimationControllerSequence( pSequenceAnimations, flAnimationTimes );
	}

	return new CAnimationController( pControllerSequences );
}